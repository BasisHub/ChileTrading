use ::components/db/DataProvider.bbj::DataProvider
use com.basiscomponents.db.DataRow

use ::generated/CountryDataProviderT.bbj::CountryDataProviderT

rem /**
rem * CountryDataProvider
rem *
rem * derived class from CountryDataProviderT
rem * put all custom additions and method overrides in this class
rem * to allow for iterative re-generation of CountryDataProviderT
rem * override to implement custom behavior that belongs to application logic
rem *
rem * 
rem * @version 1.0
rem */
class public CountryDataProvider extends CountryDataProviderT

    rem place your own field definitions for the database access logic here:

    rem /**
    rem * Method CountryDataProvider():
    rem * standard constructor
    rem */
    method public CountryDataProvider()

        #super!()

    methodend

    rem /**
    rem * Method setupDatabaseLink:
    rem * this method does setup the database sql and the key information#
    rem * override to implement a custom sql statement (like for adding JOINs)
    rem * or to adjust the primary key information for the table
    rem */
    method protected void setupDatabaseLink()

        rem override to adjust to special settings
        rem generated super class does the following:

        rem #setDataSource("ChileTrading")
        rem #setSchema("")
        rem #setSchemaPfx("")        
        rem #setSQL("SELECT * FROM COUNTRY")
		rem #setSQL("SELECT ID,NAME FROM COUNTRY")
		
        rem #setPrimaryTable("COUNTRY")
        
        rem #addPrimaryKeySegment("ID")
        
        rem #setEntityClass(DataRow.newInstance())

        REM ENABLE LINES FOR THOSE FIELDS YOU WANT TO HAVE FULLTEXT SEARCHEABLE
        REM NOTE THIS SHOULD FIT THE BBJ TEXTSEARCH INDEX WHEN USING A BBJ DATABASE
        REM #super!.getFulltextFilterFields().addItem("ID")        
        REM #super!.getFulltextFilterFields().addItem("NAME")        
        

        #super!.setupDatabaseLink()

    methodend

    rem /**
    rem * Method buildSQLStatement:
    rem * create the SELECT statement for a query based on the data
    rem * override to implement a custom sql statement
    rem * @param java.util.HashMap filterCond!: a Hashmap with filter conditions set in the user interface
    rem * @param java.util.HashMap navigationCond!: a Hashmap with filter conditions set by the application logic (like key dependencies)
    rem * @param BBjVector orderByCols!: a HashMap with the columns to be ordered by
    rem */
    method protected BBjString buildSQLStatement(java.util.HashMap filterCond!, java.util.HashMap navigationCond!, BBjVector orderByCols!)

        methodret #super!.buildSQLStatement(filterCond!, navigationCond!, orderByCols!)

    methodend

    rem /**
    rem * Method getDistinctValues:
    rem * create the SELECT statement for a query based on the data
    rem * override to implement a custom sql statement to determine the distinct values for a column
    rem * @param BBjString fieldName$: the column of interest
    rem * @return java.util.TreeMap distinct!: a map with the distinct values in a column
    rem */
    method public java.util.TreeMap getDistinctValues(BBjString fieldName$)

        methodret #super!.getDistinctValues(fieldName$)

    methodend
    
    
    method public void deleteRecords(BBjVector indexList!)

        #super!.deleteRecords(indexList!)

    methodend
    
    method public void updateRecord(DataRow rec!, DataRow orig_rec!)
    
        #super!.updateRecord(rec!, orig_rec!)
        
    methodend
    
    method public void insertRecord(DataRow rec!)
    
        #super!.insertRecord(rec!)
        
    methodend
        
    rem /**
    rem * Method openDatabase:
    rem * open the connection to the database
    rem */
    method protected void openDatabase()

        #super!.openDatabase()

        rem if you want to do something else here
        rem then you'll need to do something like
        rem #super!.setConnection( someJavaSqlConnection! ) 

    methodend

    rem /**
    rem * Method closeDatabase:
    rem * close the connection to the database
    rem */
    method protected void closeDatabase()

        #super!.closeDatabase()

    methodend

classend


















